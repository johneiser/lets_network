[{"id": "analyze", "parent": "#", "text": "analyze", "type": "default"}, {"id": "analyze/pcap", "parent": "analyze", "text": "pcap", "type": "default"}, {"id": "generate", "parent": "#", "text": "generate", "type": "default"}, {"id": "generate/tls", "parent": "generate", "text": "tls", "type": "default"}, {"id": "lets/analyze/pcap/termshark_", "parent": "analyze/pcap", "text": "termshark", "type": "module", "help": "usage: analyze/pcap/termshark [-h] [-i] [-g] [-o OUTPUT] [-v] [-c COUNT]\n                              [-t TIMEOUT] [-f FILTER] [-r REGEX] [-x XREGEX]\n\n    Analyze a pcap file using termshark.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -c COUNT, --count COUNT\n                        number of packets to read (all)\n  -t TIMEOUT, --timeout TIMEOUT\n                        number of seconds to read (infinite)\n  -f FILTER, --filter FILTER\n                        BPF filter to apply\n  -r REGEX, --regex REGEX\n                        expression(s) to qualify packet (AND)\n  -x XREGEX, --xregex XREGEX\n                        expression(s) to disqualify packet (OR)\n"}, {"id": "lets/generate/tls/certificate_", "parent": "generate/tls", "text": "certificate", "type": "module", "help": "usage: generate/tls/certificate [-h] [-i] [-g] [-o OUTPUT] [-v] [-s SIZE]\n                                [-e EXPIRE] [-a] [--country COUNTRY]\n                                [--state STATE] [--locality LOCALITY]\n                                [--organization ORGANIZATION]\n                                [--organizational-unit ORGANIZATIONAL_UNIT]\n                                [-n COMMON_NAME] [--email EMAIL]\n\n    Generate an SSL/TLS X.509 certificate in PEM format (provide certificate authority as input).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -s SIZE, --size SIZE  key size (2048 bits)\n  -e EXPIRE, --expire EXPIRE\n                        expire time (365 days)\n  -a, --authority       indicate certificate authority (False)\n  --country COUNTRY     country name (AU)\n  --state STATE         state (Some-State)\n  --locality LOCALITY   locality (None)\n  --organization ORGANIZATION\n                        organization (Internet Widgets Pty Ltd)\n  --organizational-unit ORGANIZATIONAL_UNIT\n                        organizational unit (None)\n  -n COMMON_NAME, --common-name COMMON_NAME\n                        common name (None)\n  --email EMAIL         email (None)\n"}, {"id": "lets/listen/sniff/lan_", "parent": "listen/sniff", "text": "lan", "type": "module", "help": "usage: listen/sniff/lan [-h] [-i] [-g] [-o OUTPUT] [-v] [-n INTERFACE]\n                        [-c COUNT] [-t TIMEOUT] [-f FILTER] [-r REGEX]\n                        [-x XREGEX] [-m] [-p] [-d]\n\n    Sniff packets on a local area network.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -n INTERFACE, --interface INTERFACE\n                        network interface(s) on which to sniff)\n  -c COUNT, --count COUNT\n                        number of packets to sniff (all)\n  -t TIMEOUT, --timeout TIMEOUT\n                        number of seconds to sniff (infinite)\n  -f FILTER, --filter FILTER\n                        BPF filter to apply\n  -r REGEX, --regex REGEX\n                        expression(s) to qualify packet (AND)\n  -x XREGEX, --xregex XREGEX\n                        expression(s) to disqualify packet (OR)\n  -m, --monitor         listen in monitor mode (False)\n  -p, --pcap            output packets as pcap (False)\n  -d, --debug           unpack and display each captured packet\n"}, {"id": "lets/proxy/forward/http_", "parent": "proxy/forward", "text": "http", "type": "module", "help": "usage: proxy/forward/http [-h] [-i] [-g] [-o OUTPUT] [-v] [-p PORT]\n                          [--interface INTERFACE] [-m] [-c CA]\n\n    Proxy HTTP traffic.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PORT, --port PORT  listen on port\n  --interface INTERFACE\n                        listen on interface\n  -m, --mitm            mitm proxied traffic\n  -c CA, --ca CA        mitm certificate authority (PEM key+cert)\n"}, {"id": "lets/proxy/forward/openvpn/http_", "parent": "proxy/forward/openvpn", "text": "http", "type": "module", "help": "usage: proxy/forward/openvpn/http [-h] [-i] [-g] [-o OUTPUT] [-v] [-p PORT]\n                                  [--interface INTERFACE] [-a AUTH] [-m]\n                                  [-c CA]\n\n    Proxy HTTP traffic over an OpenVPN tunnel (provide vpn config as input).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PORT, --port PORT  listen on port\n  --interface INTERFACE\n                        listen on interface\n  -a AUTH, --auth AUTH  use openvpn authentication file\n  -m, --mitm            mitm proxied traffic\n  -c CA, --ca CA        mitm certificate authority (PEM key+cert)\n"}, {"id": "lets/proxy/forward/openvpn/socks5_", "parent": "proxy/forward/openvpn", "text": "socks5", "type": "module", "help": "usage: proxy/forward/openvpn/socks5 [-h] [-i] [-g] [-o OUTPUT] [-v] [-p PORT]\n                                    [--interface INTERFACE] [-a AUTH] [-m]\n                                    [-c CA]\n\n    Proxy SOCKS5 traffic over an OpenVPN tunnel (provide vpn config as input).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PORT, --port PORT  listen on port\n  --interface INTERFACE\n                        listen on interface\n  -a AUTH, --auth AUTH  use openvpn authentication file\n  -m, --mitm            mitm proxied traffic\n  -c CA, --ca CA        mitm certificate authority (PEM key+cert)\n"}, {"id": "lets/proxy/forward/socks5_", "parent": "proxy/forward", "text": "socks5", "type": "module", "help": "usage: proxy/forward/socks5 [-h] [-i] [-g] [-o OUTPUT] [-v] [-p PORT]\n                            [--interface INTERFACE] [-m] [-c CA]\n\n    Proxy SOCKS5 traffic.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PORT, --port PORT  listen on port\n  --interface INTERFACE\n                        listen on interface\n  -m, --mitm            mitm proxied traffic\n  -c CA, --ca CA        mitm certificate authority (PEM key+cert)\n"}, {"id": "lets/proxy/forward/tor/http_", "parent": "proxy/forward/tor", "text": "http", "type": "module", "help": "usage: proxy/forward/tor/http [-h] [-i] [-g] [-o OUTPUT] [-v] [-p PORT]\n                              [--interface INTERFACE] [--country COUNTRY] [-m]\n                              [-c CA]\n\n    Proxy HTTP traffic over TOR.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PORT, --port PORT  listen on port\n  --interface INTERFACE\n                        listen on interface\n  --country COUNTRY     emerge from country code\n  -m, --mitm            mitm proxied traffic\n  -c CA, --ca CA        mitm certificate authority (PEM key+cert)\n"}, {"id": "lets/proxy/forward/tor/socks_", "parent": "proxy/forward/tor", "text": "socks", "type": "module", "help": "usage: proxy/forward/tor/socks [-h] [-i] [-g] [-o OUTPUT] [-v] [-p PORT]\n                               [--interface INTERFACE] [--country COUNTRY]\n\n    Proxy SOCKS4/SOCKS5 traffic over TOR.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PORT, --port PORT  listen on port\n  --interface INTERFACE\n                        listen on interface\n  --country COUNTRY     emerge from country code\n"}, {"id": "lets/proxy/reverse/ngrok/http_", "parent": "proxy/reverse/ngrok", "text": "http", "type": "module", "help": "usage: proxy/reverse/ngrok/http [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                [--country {us,eu,ap,au,sa,jp,in}]\n                                [--proxy PROXY]\n                                lhost lport\n\n    Proxy HTTP traffic from Ngrok.\n    \n\npositional arguments:\n  lhost                 local host\n  lport                 local port\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  --country {us,eu,ap,au,sa,jp,in}\n                        use country code (us)\n  --proxy PROXY         use proxy ([http|socks5]://ip:port)\n"}, {"id": "lets/proxy/reverse/tor/service_", "parent": "proxy/reverse/tor", "text": "service", "type": "module", "help": "usage: proxy/reverse/tor/service [-h] [-i] [-g] [-o OUTPUT] [-v] [-p PORT]\n                                 lhost lport\n\n    Proxy TCP traffic from TOR as a hidden service.\n    \n\npositional arguments:\n  lhost                 local host\n  lport                 local port\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PORT, --port PORT  remote port\n"}, {"id": "lets/redirect/tcp/tcp_", "parent": "redirect/tcp", "text": "tcp", "type": "module", "help": "usage: redirect/tcp/tcp [-h] [-i] [-g] [-o OUTPUT] [-v]\n                        [lhost] lport rhost rport\n\n    Redirect TCP traffic over TCP.\n    \n\npositional arguments:\n  lhost                 listen on host (0.0.0.0)\n  lport                 listen on port\n  rhost                 connect to host\n  rport                 connect to port\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/redirect/tcp/tls_", "parent": "redirect/tcp", "text": "tls", "type": "module", "help": "usage: redirect/tcp/tls [-h] [-i] [-g] [-o OUTPUT] [-v] [-k KEY]\n                        [-c CERTIFICATE] [--ca CA]\n                        [lhost] lport rhost rport\n\n    Redirect TCP traffic over TLS.\n    \n\npositional arguments:\n  lhost                 listen on host (0.0.0.0)\n  lport                 listen on port\n  rhost                 connect to host\n  rport                 connect to port\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -k KEY, --key KEY     use TLS key\n  -c CERTIFICATE, --certificate CERTIFICATE\n                        use TLS certificate\n  --ca CA               use tls certificate authority to verify peer\n"}, {"id": "lets/redirect/tls/tcp_", "parent": "redirect/tls", "text": "tcp", "type": "module", "help": "usage: redirect/tls/tcp [-h] [-i] [-g] [-o OUTPUT] [-v] [-k KEY]\n                        [-c CERTIFICATE] [--ca CA]\n                        [lhost] lport rhost rport\n\n    Redirect TLS traffic over TCP.\n    \n\npositional arguments:\n  lhost                 listen on host (0.0.0.0)\n  lport                 listen on port\n  rhost                 connect to host\n  rport                 connect to port\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -k KEY, --key KEY     use TLS key\n  -c CERTIFICATE, --certificate CERTIFICATE\n                        use TLS certificate\n  --ca CA               use tls certificate authority to verify peer\n"}, {"id": "listen", "parent": "#", "text": "listen", "type": "default"}, {"id": "listen/sniff", "parent": "listen", "text": "sniff", "type": "default"}, {"id": "proxy", "parent": "#", "text": "proxy", "type": "default"}, {"id": "proxy/forward", "parent": "proxy", "text": "forward", "type": "default"}, {"id": "proxy/forward/openvpn", "parent": "proxy/forward", "text": "openvpn", "type": "default"}, {"id": "proxy/forward/tor", "parent": "proxy/forward", "text": "tor", "type": "default"}, {"id": "proxy/reverse", "parent": "proxy", "text": "reverse", "type": "default"}, {"id": "proxy/reverse/ngrok", "parent": "proxy/reverse", "text": "ngrok", "type": "default"}, {"id": "proxy/reverse/tor", "parent": "proxy/reverse", "text": "tor", "type": "default"}, {"id": "redirect", "parent": "#", "text": "redirect", "type": "default"}, {"id": "redirect/tcp", "parent": "redirect", "text": "tcp", "type": "default"}, {"id": "redirect/tls", "parent": "redirect", "text": "tls", "type": "default"}]
